import { useState } from "react";
import type { NextPage } from "next";
import { useCookies } from "react-cookie";
import Head from "next/head";
import useInputs from "../hooks/useInputs";
import useCheckAPI from "../hooks/useCheckAPI";
import Loading from "../components/Loading";
import Input from "../components/Input";
import pkg from "../package.json";
import Version from "../components/Version";

const Home: NextPage = () => {
  const { loading, error, data } = useCheckAPI();
  const [cookie, _, removeCookie] = useCookies(["token"]);

  const [state, setState] = useState<"login" | "register" | "successRegister">(
    "login"
  );
  const isLogin = state === "login";
  const h = useInputs(isLogin, setState);
  const requestLoading = loading || h.registerLoading || h.loginLoading;

  if (cookie.token) {
    return (
      <div className="relative mb-10 mt-5 md:mx-auto md:max-w-4xl px-4">
        <div>Successfully logged in</div>
        <button
          className="bg-red-800 hover:bg-red-900 text-white font-bold py-2 px-4 my-6 rounded"
          onClick={() => removeCookie("token")}
          type="button"
        >
          Logout
        </button>
        <Version front={pkg.version} back={data?.version} />
      </div>
    );
  }

  if(state === "successRegister"){
    return (
      <div className="relative mb-10 mt-5 md:mx-auto md:max-w-4xl px-4">
      <div>Successfully register. Proceed to Login</div>
      <button
        className="bg-green-800 hover:bg-green-900 text-white font-bold py-2 px-4 my-6 rounded"
        onClick={() => setState("login")}
        type="button"
      >
        Login
      </button>
      <Version front={pkg.version} back={data?.version} />
    </div>
    )
  }

  return (
    <>
      <Head>
        <title>Sign in / Login form</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {h.loginError && (
        <div className="bg-red-700 text-white p-4">{h.loginError}</div>
      )}
      {h.registerError && (
        <div className="bg-red-700 text-white p-4">{h.registerError}</div>
      )}
      <div className="relative mb-10 mt-5 md:mx-auto md:max-w-4xl px-4">
        <div className="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4 flex flex-col">
          {h.inputs.map((i) => (
            <Input key={i.label} {...i} />
          ))}
          <button
            className="bg-blue-800 hover:bg-blue-900 text-white font-bold py-2 px-4 my-6 rounded"
            onClick={h.onSubmit}
            type="button"
          >
            {requestLoading && <Loading />}
            {isLogin ? "Login" : "Register"}
          </button>
          {loading && (
            <div className="my-8">
              Checking API status. This may take sometimes since back end is
              deployed on Heroku Free Edition
            </div>
          )}
          <div className="flex items-center justify-end">
            <div>
              <span className="pr-1">
                {isLogin ? "First time?" : "Already have account?"}
              </span>
              <a
                className="inline-block align-baseline font-bold text-sm text-blue hover:text-blue-darker"
                href="#"
                onClick={() =>
                  !requestLoading &&
                  !error &&
                  setState(isLogin ? "register" : "login")
                }
              >
                {(isLogin ? "Register" : "Login") + " now"}
              </a>
            </div>
          </div>
          <Version front={pkg.version} back={data?.version} />
        </div>
      </div>
    </>
  );
};

export default Home;
